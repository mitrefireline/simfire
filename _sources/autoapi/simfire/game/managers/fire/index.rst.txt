:py:mod:`simfire.game.managers.fire`
====================================

.. py:module:: simfire.game.managers.fire

.. autoapi-nested-parse::

   Fire
   ====

   Defines the different `FireManager`s (`ConstantSpreadFireManager` and
   `RothermelFireManager`) that determine how a fire moves about a `fire_map`.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   simfire.game.managers.fire.FireManager
   simfire.game.managers.fire.RothermelFireManager
   simfire.game.managers.fire.ConstantSpreadFireManager




Attributes
~~~~~~~~~~

.. autoapisummary::

   simfire.game.managers.fire.log
   simfire.game.managers.fire.NewLocsType
   simfire.game.managers.fire.SpriteParamsType


.. py:data:: log
   

   

.. py:data:: NewLocsType
   

   

.. py:data:: SpriteParamsType
   

   

.. py:class:: FireManager(init_pos, fire_size, max_fire_duration, attenuate_line_ros = True, headless = False)

   Base class to manage the spread of the fire as well as the map of which
   pixels have already burned. Child classes should create their own update()
   method to describe how the fire spreads.

   Initialize the class by recording the initial fire location and size.

   Create the fire sprite and fire_map and mark the location of the
   initial fire.

   :param init_pos: The (x,y) location of the initial fire
   :param fire_size: The (n,n) pixel size of the fire sprite. Note that
                     the sprite pixel size does not affect which tiles/pixels
                     are actually burning. This is for display purposes only.
                     Each fire is only burning on one pixel at a time.
   :param max_fire_duration: The number of frames/updates a fire will burn
                             for before going out. This is moslty useful so
                             that fires that have spread and are now on the
                             interior do not have to keep being rendered.
   :param attenuate_line_ros: Whether or not to attenuate the rate of spread.
                              Defaults to `True`. If set to `True`, will subtract
                              values found in `enums.RoSAttenuation` from the initial
                              rate of spread calculation. If set to `False`, all
                              different control lines will completely stop the fire.
   :param headless: Flag to run in a headless state. This will allow PyGame objects to
                    not be initialized.

   :returns: None

   .. py:method:: update(fire_map)

      Method that describes how the fires in `self.sprites`should spread.

      Should be updated in child classes.

      :param fire_map: All possible fire conditions at each pixel location



.. py:class:: RothermelFireManager(init_pos, fire_size, max_fire_duration, pixel_scale, update_rate, fuel_particle, terrain, environment, max_time = None, attenuate_line_ros = True, headless = False)

   Bases: :py:obj:`FireManager`

   This FireManager will spread the fire based on the basic `Rothermel
   Model <https://www.fs.fed.us/rm/pubs_series/rmrs/gtr/rmrs_gtr371.pdf`_.

   Initialize the class by recording the initial fire location and size.
   Create the fire sprite and fire_map and mark the location of the
   initial fire.

   :param init_pos: The (x,y) location of the initial fire
   :param fire_size: The (n,n) pixel size of the fire sprite. Note that
                     the sprite pixel size does not affect which tiles/pixels
                     are actually burning. This is for display purposes only.
                     Each fire is only burning on one pixel at a time.
   :param max_fire_duration: The number of frames/updates a fire will burn
                             for before going out. This is moslty useful so
                             that fires that have spread and are now on the
                             interior do not have to keep being rendered.
   :param pixel_scale: The amount of ft each pixel represents. This is needed
                       to track how much a fire has burned at a certain
                       location since it may take more than one update for
                       a pixel/location to catch on fire depending on the
                       rate of spread.
   :param update_rate: The amount of time in minutes that passes for each simulation
                       update step
   :param fuel_particle: The parameters that describe the fuel particle
   :param terrain: The Terrain that describes the simulation/game
   :param environment: The Environment that describes the simulation/game
   :param max_time: The maximum amount of time that the fire can spread for, in
                    minutes.
   :param attenuate_line_ros: Whether or not to attenuate the rate of spread.
                              Defaults to `True`. If set to `True`, will subtract
                              values found in `enums.RoSAttenuation` from the initial
                              rate of spread calculation. If set to `False`, all
                              different control lines will completely stop the fire.
   :param headless: Flag to run in a headless state. This will allow PyGame objects to
                    not be initialized.

   .. py:method:: draw_spread_graph(game_screen = None)

      Create a matplotlib Figure with the fire spread graph overlain on the
      terrain image.

      :param game_screen: The game's screen to use as the background. If None, use
                          the terrain image

      :returns:

                A matplotlib.pyplot.Figure containing the graph on top of the
                    terrain image


   .. py:method:: update(fire_map)

      Update the spreading of the fires. This function will remove
      any fires that have exceded their duration and will spread fires
      that have reached the correct rate of spread for a long enough
      time.

      :param fire_map: The numpy array that tracks the fire's burn status for
                       each pixel in the simulation

      :returns: A NumPy array of the updated `fire_map` and the current `GameStatus`



.. py:class:: ConstantSpreadFireManager(init_pos, fire_size, max_fire_duration, rate_of_spread)

   Bases: :py:obj:`FireManager`

   This FireManager will spread fire at a constant rate in all directions.

   Initialize the class by recording the initial fire location and size.
   Create the fire sprite and `fire_map` and mark the location of the
   initial fire.

   :param init_pos: The (x,y) location of the initial fire
   :param fire_size: The (n,n) pixel size of the fire sprite. Note that
                     the sprite pixel size does not affect which tiles/pixels
                     are actually burning. This is for display purposes only.
                     Each fire is only burning on one pixel at a time.
   :param max_fire_duration: The number of frames/updates a fire will burn
                             for before going out. This is moslty useful so
                             that fires that have spread and are now on the
                             interior do not have to keep being rendered.
   :param rate_of_spread: The number of frames that must pass before a fire
                          can spread to adjacent pixels.

   .. py:method:: update(fire_map)

      Spread the fire and add new fire sprites to the display. The fire
      will spread at a constant rate in all directions based on
      self.rate_of_spread. `self.fire_map` is updated accordingly based on
      which fires have started/spread/stopped.

      :param fire_map: All possible fire conditions at each pixel location

      :returns: An updated NumPy array of the current `fire_map`



