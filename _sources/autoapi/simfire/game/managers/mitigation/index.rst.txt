:py:mod:`simfire.game.managers.mitigation`
==========================================

.. py:module:: simfire.game.managers.mitigation


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   simfire.game.managers.mitigation.ControlLineManager
   simfire.game.managers.mitigation.FireLineManager
   simfire.game.managers.mitigation.ScratchLineManager
   simfire.game.managers.mitigation.WetLineManager




Attributes
~~~~~~~~~~

.. autoapisummary::

   simfire.game.managers.mitigation.PointType
   simfire.game.managers.mitigation.PointsType


.. py:data:: PointType
   

   

.. py:data:: PointsType
   

   

.. py:class:: ControlLineManager(size, pixel_scale, terrain, headless = False)

   Base class to create and manage control lines and allow for the creation of more
   control lines while the game is running. Child classes will change the `line_type`,
   `sprite_type`, and add the initial points with `

   Call `update()` to add points.

   Initialize the class with the display size of each `ControlLine` sprite,
   the `pixel_scale`, and the `Terrain` that the `ControlLine`s will be placed.

   :param size: The display size of each `ControlLine` point.
   :param pixel_scale: The amount of ft each pixel represents. This is needed
                       to track how much a fire has burned at a certain
                       location since it may take more than one update for
                       a pixel/location to catch on fire depending on the
                       rate of spread.
   :param terrain: The Terrain that describes the simulation/game
   :param headless: Flag to run in a headless state. This will allow PyGame objects to
                    not be initialized.

   .. py:method:: update(fire_map, points = None)

      Updates the passed in `fire_map` with new `ControlLine` `points`.

      :param fire_map: The `fire_map` to update with new points

      :returns: The upadated fire map with the control lines added.
      :rtype: fire_map



.. py:class:: FireLineManager(size, pixel_scale, terrain, headless = False)

   Bases: :py:obj:`ControlLineManager`

   Manages the placement of `FireLines` and `FireLine` sprites. Should have varying
   physical characteristics from `ScratchLines` and `WetLines`.

   Call `update()` to add points.

   Initialize the class with the display size of each `FireLine` sprite,
   the `pixel_scale`, and the `Terrain` that the `FireLine`s will be placed.

   Sets the `line_type` to `BurnStatus.FIRELINE`.

   :param size: The display size of each `FireLine` point.
   :param pixel_scale: The amount of ft each pixel represents. This is needed
                       to track how much a fire has burned at a certain
                       location since it may take more than one update for
                       a pixel/location to catch on fire depending on the
                       rate of spread.
   :param terrain: The Terrain that describes the simulation/game
   :param headless: Flag to run in a headless state. This will allow PyGame objects to
                    not be initialized.


.. py:class:: ScratchLineManager(size, pixel_scale, terrain, headless = False)

   Bases: :py:obj:`ControlLineManager`

   Manages the placement of `FireLines` and `ScratchLine` sprites. Should have varying
   physical characteristics from `FireLines` and `WetLines`.

   Call `update()` to add points.

   Initialize the class with the display size of each `ScratchLine` sprite,
   the `pixel_scale`, and the `Terrain` that the `ScratchLine`s will be placed.

   Sets the `line_type` to `BurnStatus.SCRATCHLINE`.

   :param size: The display size of each `ScratchLine` point.
   :param pixel_scale: The amount of ft each pixel represents. This is needed
                       to track how much a fire has burned at a certain
                       location since it may take more than one update for
                       a pixel/location to catch on fire depending on the
                       rate of spread.
   :param terrain: The Terrain that describes the simulation/game
   :param points: The list of all ((x1, y1), (x2, y2)) pairs of pairs that designate
                  between which two points control lines will be drawn.


.. py:class:: WetLineManager(size, pixel_scale, terrain, headless = False)

   Bases: :py:obj:`ControlLineManager`

   Manages the placement of `WetLines` and `WetLine` sprites. Should have varying
   physical characteristics from `ScratchLines` and `FireLines`.

   Call `update()` to add points.

   Initialize the class with the display size of each `WetLine` sprite,
   the `pixel_scale`, and the `Terrain` that the `WetLine`s will be placed.

   Sets the `line_type` to `BurnStatus.WETLINE`.

   :param size: The display size of each `WetLine` point.
   :param pixel_scale: The amount of ft each pixel represents. This is needed
                       to track how much a fire has burned at a certain
                       location since it may take more than one update for
                       a pixel/location to catch on fire depending on the
                       rate of spread.
   :param terrain: The Terrain that describes the simulation/game
   :param points: The list of all ((x1, y1), (x2, y2)) pairs of pairs that designate
                  between which two points control lines will be drawn.


