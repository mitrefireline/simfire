:py:mod:`simfire.sim.simulation`
================================

.. py:module:: simfire.sim.simulation


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   simfire.sim.simulation.Simulation
   simfire.sim.simulation.FireSimulation




Attributes
~~~~~~~~~~

.. autoapisummary::

   simfire.sim.simulation.log


.. py:data:: log
   

   

.. py:class:: Simulation(config)

   Bases: :py:obj:`abc.ABC`

   Base class with several built in methods for interacting with different simulators.

   Current simulators using this API:
     - `SimFire <https://gitlab.mitre.org/fireline/simfire>`_

   Initialize the Simulation object for interacting with the RL harness.

   :param config: The `Config` that specifies simulation parameters, read in from a
                  YAML file.

   .. py:method:: run(time)
      :abstractmethod:

      Runs the simulation.

      :param time: Either how many updates to run the simulation, based on the config
                   value, `config.simulation.update_rate`, or a length of time expressed
                   as a string (e.g. `120m`, `2h`, `2hour`, `2hours`, `1h 60m`, etc.)

      :returns:

                    - The Burned/Unburned/ControlLine pixel map (`self.fire_map`). Values
                      range from [0, 6] (see simfire/enums.py:BurnStatus).
                    - A boolean indicating whether the simulation has reached the end.
      :rtype: A tuple of the following


   .. py:method:: get_actions()
      :abstractmethod:

      Returns the action space for the simulation.

      :returns: Dict[str, int]
      :rtype: The action / mitgiation strategies available


   .. py:method:: get_attribute_data()
      :abstractmethod:

      Initialize and return the observation space for the simulation.

      :returns: The dictionary of observations containing NumPy arrays.


   .. py:method:: get_attribute_bounds()
      :abstractmethod:

      Initialize and return the observation space bounds for the simulation.

      :returns: The dictionary of observation space bounds containing NumPy arrays.


   .. py:method:: get_seeds()
      :abstractmethod:

      Returns the available randomization seeds for the simulation.

      :returns: The dictionary with all available seeds to change and their values.


   .. py:method:: set_seeds(seeds)
      :abstractmethod:

      Sets the seeds for different available randomization parameters.

      Which randomization parameters can be  set depends on the simulator being used.
      Available seeds can be retreived by calling the `self.get_seeds` method.

      :param seeds: The dictionary of seed names and their current seed values.

      :returns: Whether or not the method successfully set a seed value.


   .. py:method:: update_mitigation(points)
      :abstractmethod:

      Update the `self.fire_map` with new mitigation points

      :param points: A list of `(x, y, mitigation)` tuples. These will be added to
                     `self.fire_map`.


   .. py:method:: load_mitigation(mitigation_map)
      :abstractmethod:

      Set the 'self.fire_map' to the new mitigation map

      :param mitigation_map: A numpy array of mitigations to be set as 'self.fire_map'


   .. py:method:: get_disaster_categories()

      Returns all possible categories that a location in the map can be in.

      :returns: A dictionary of enum name to enum value.


   .. py:method:: disaster_categories()
      :property:

      Returns the possible categories that a location in the map can be in.

      :returns: An enum of possible categories.



.. py:class:: FireSimulation(config)

   Bases: :py:obj:`Simulation`

   Base class with several built in methods for interacting with different simulators.

   Current simulators using this API:
     - `SimFire <https://gitlab.mitre.org/fireline/simfire>`_

   Initialize the `FireSimulation` object for interacting with the RL harness.

   :param config: The `Config` that specifies simulation parameters, read in from a
                  YAML file.

   .. py:method:: reset()

      Reset the `self.fire_map`, `self.terrain`, `self.fire_manager`,
      and all mitigations to initial conditions


   .. py:method:: get_actions()

      Return the action space for the fire simulation.

      :returns: Dict[str, int]
      :rtype: The action / mitigation strategies available


   .. py:method:: disaster_categories()
      :property:

      Returns all possible categories that a location in the map can be in.

      :returns: A dictionary of enum name to enum value.


   .. py:method:: get_attribute_bounds()

      Return the observation space bounds for the fire simulation

      :returns: The dictionary of observation space bounds containing NumPy arrays.


   .. py:method:: get_attribute_data()

      Initialize and return the observation space for the simulation.

      :returns: The dictionary of observation data containing NumPy arrays.


   .. py:method:: load_mitigation(mitigation_map)

      Set the 'self.fire_map' to the new mitigation map

      :param mitigation_map: A numpy array of mitigations to be set as 'self.fire_map'


   .. py:method:: update_mitigation(points)

      Update the `self.fire_map` with new mitigation points

      :param points: A list of `(column, row, mitigation)` tuples. These will be added to
                     `self.fire_map`.


   .. py:method:: update_agent_positions(points)

      Update the `self.agent_positions` with new agent positions

      :param points: A list of `(column, row, agent_id)` tuples. These will be added to
                     `self.agent_positions`.


   .. py:method:: run(time)

      Runs the simulation with or without mitigation lines.

      Use `self.terrain` to either:

        1. Place agent's mitigation lines and then spread fire
        2. Only spread fire, with no mitigation line
              (to compare for reward calculation)

      :param time: Either how many updates to run the simulation, based on the config
                   value, `config.simulation.update_rate`, or a length of time expressed
                   as a string (e.g. `120m`, `2h`, `2hour`, `2hours`, `1h 60m`, etc.)

      :returns:

                    - The Burned/Unburned/ControlLine pixel map (`self.fire_map`). Values
                      range from [0, 6] (see simfire/enums.py:BurnStatus).
                    - A boolean indicating whether the simulation has reached the end.
      :rtype: A tuple of the following


   .. py:method:: get_seeds()

      Returns the available randomization seeds for the simulation.

      :returns: The dictionary with all available seeds to change and their values.


   .. py:method:: set_seeds(seeds)

      Sets the seeds for different available randomization parameters.

      Which randomization parameters can be  set depends on the simulator being used.
      Available seeds can be retreived by calling the `self.get_seeds` method.

      :param seeds: The dictionary of seed names and the values they will be set to.

      :returns: Whether or not the method successfully set a seed value.


   .. py:method:: set_fire_initial_position(pos)

      Manually set the fire intial position for a static fire.

      :param pos: The (x, y) coordinates to start the fire at


   .. py:method:: get_layer_types()

      Returns the current layer types for the simulation

      :returns: A dictionary of the current layer type.


   .. py:method:: set_layer_types(types)

      Set the type of layers to be used in the simulation

      Available keys are 'elevation' and 'fuel' and available values are 'functional'
      and 'operational'.

      :param types: The dictionary of layer names and the data type they will be set to.

      :returns: Whether or not the method successfully set a data type.


   .. py:method:: save_gif(filename = None)

      Saves the most recent simulation as a GIF.

      Will save a GIF of all calls to `run` from the last time `self.rendering` was set
      to `True`.


   .. py:method:: save_spread_graph(filename = None)

      Saves the most recent simulation as a PNG.

      Will save a PNG of the spread graph from the last time `self.rendering` was set
      to `True`.


   .. py:method:: rendering()
      :property:

      Returns whether or not the simulator is currently rendering.

      :returns: Whether or not the simulator is currently rendering.



