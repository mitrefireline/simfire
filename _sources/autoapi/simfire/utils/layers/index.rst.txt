:py:mod:`simfire.utils.layers`
==============================

.. py:module:: simfire.utils.layers


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   simfire.utils.layers.LandFireLatLongBox
   simfire.utils.layers.LatLongBox
   simfire.utils.layers.DataLayer
   simfire.utils.layers.BurnProbabilityLayer
   simfire.utils.layers.OperationalBurnProbabilityLayer
   simfire.utils.layers.FunctionalBurnProbabilityLayer
   simfire.utils.layers.TopographyLayer
   simfire.utils.layers.OperationalTopographyLayer
   simfire.utils.layers.FunctionalTopographyLayer
   simfire.utils.layers.FuelLayer
   simfire.utils.layers.OperationalFuelLayer
   simfire.utils.layers.FunctionalFuelLayer
   simfire.utils.layers.HistoricalLayer



Functions
~~~~~~~~~

.. autoapisummary::

   simfire.utils.layers.get_closest_indice



Attributes
~~~~~~~~~~

.. autoapisummary::

   simfire.utils.layers.log


.. py:data:: log
   

   

.. py:class:: LandFireLatLongBox(points = ((37.45, -120.44), (37.35, -120.22)), year = '2020', layers = ('fuel', 'topographic'), height = 4500, width = 4500)

   Class that gets all relevant operational data.

   Currently only support using Fuel and Elevation data within SimFire.

   This class of methods will get initialized with the config using the lat/long
   bounding box.

   Real-world is measured in meters
   Data is measured in pixels corresponding to the resolution
       i.e: resolution = 30m = 1 pixel

   In geospatial world:
       30m == 0.00027777777803598015 degrees in lat/long space
       caveat: ESPG 4326, WGS84


   .. py:method:: query_lat_lon_layer_data()

      Functionality to get the indices and values of the layers at a queried point.

      For GIS data you need to calculate the offsets to get the array indice

      :param layer: the gdal layer to query
      :param band: the gdal raster band that contains the data


   .. py:method:: create_lat_lon_array()

      We will need to be able to map between the geospatial data and
      the numpy arrays that SimFire uses. To do this, we will create a
      secondary np.ndarray of tuples of lat/lon data.

      This will especially get used with the HistoricalLayer

      :param None:

      :returns: (lat, lon)
      :rtype: np.ndarray of tuples (h, w)



.. py:class:: LatLongBox

   Base class for original LatLongBox functionality.

   Only used for typing purposes or until LadFire provides
       BurnProbabilty data.

   Initializes variables/methods that the BurnProbabilty layer types.


.. py:class:: DataLayer

   Base class for any data that affects the terrain.
   The data in this class should have a value for every pixel in the terrain.

   This parent class only exists to set a base value for self.data


.. py:class:: BurnProbabilityLayer

   Bases: :py:obj:`DataLayer`

   Base class for use with operational and procedurally generated
   fuel data. This class implements the code needed to
   create the terrain image to use with the display.

   Simple call to the parent DataLayer class.

   :param None:

   :returns: None


.. py:class:: OperationalBurnProbabilityLayer(lat_long_box, path)

   Bases: :py:obj:`BurnProbabilityLayer`

   Base class for use with operational and procedurally generated
   fuel data. This class implements the code needed to
   create the terrain image to use with the display.

   Initialize the elevation layer by retrieving the correct topograpchic data
   and computing the area

   :param center: The lat/long coordinates of the center point of the screen.
   :param height: The height of the screen size (meters).
   :param width: The width of the screen size (meters).
   :param resolution: The resolution to get data (meters).


.. py:class:: FunctionalBurnProbabilityLayer(height, width, elevation_fn, name)

   Bases: :py:obj:`BurnProbabilityLayer`

   Layer that stores elevation data computed from a function.

   Initialize the elvation layer by computing the elevations and contours.

   :param height: The height of the data layer
   :param width: The width of the data layer
   :param elevation_fn: A callable function that converts (x, y) coorindates to
                        elevations.


.. py:class:: TopographyLayer

   Bases: :py:obj:`DataLayer`

   Base class for use with operational and procedurally generated
   topographic/elevation data. This class implements the code needed to
   create the contour image to use with the display.

   Simple call to the parent DataLayer class.

   :param None:

   :returns: None


.. py:class:: OperationalTopographyLayer(LandFireLatLongBox)

   Bases: :py:obj:`TopographyLayer`

   Base class for use with operational and procedurally generated
   topographic/elevation data. This class implements the code needed to
   create the contour image to use with the display.

   Initialize the fuel layer by retrieving the correct fuel data
   by year.

   :param LandFireLatLongBox: the retrieved data from Ladfire's python-client


.. py:class:: FunctionalTopographyLayer(height, width, elevation_fn, name)

   Bases: :py:obj:`TopographyLayer`

   Layer that stores elevation data computed from a function.

   Initialize the elvation layer by computing the elevations and contours.

   :param height: The height of the data layer
   :param width: The width of the data layer
   :param elevation_fn: A callable function that converts (x, y) coorindates to
                        elevations.


.. py:class:: FuelLayer

   Bases: :py:obj:`DataLayer`

   Base class for use with operational and procedurally generated
   fuel data. This class implements the code needed to
   create the terrain image to use with the display.

   Simple call to the parent DataLayer class.

   :param None:

   :returns: None


.. py:class:: OperationalFuelLayer(LandFireLatLongBox)

   Bases: :py:obj:`FuelLayer`

   Base class for use with operational and procedurally generated
   fuel data. This class implements the code needed to
   create the terrain image to use with the display.

   Initialize the fuel layer by retrieving the correct fuel data
   by year.

   :param LandFireLatLongBox: the retrieved data from Ladfire's python-client


.. py:class:: FunctionalFuelLayer(height, width, fuel_fn, name)

   Bases: :py:obj:`FuelLayer`

   Layer that stores fuel data computed from a function.

   Initialize the fuel layer by computing the fuels.

   :param height: The height of the data layer
   :param width: The width of the data layer
   :param fuel_fn: A callable function that converts (x, y) coorindates to
                   elevations.
   :param name: The name of the fuel layer (e.g.: 'chaparral')


.. py:class:: HistoricalLayer(year, state, fire, path, height, width)

   
   Functionality to load the apporpriate/available historical data
   given a fire name, the state, and year of the fire.

   NOTE: Currently, this layer supports adding ALL mitigations to the
       firemap at initialization
   TODO: Add mitigations based upon runtime and implementation time

   NOTE: This layer includes functionality to calculate IoU of final perimeter
   given the BurnMD timestamp and simulation duration for validation
   purposes.
   TODO: Move this functionality to a utilities file
   TODO: Include intermediary perimeters and simulation runtime

   :param year: The year of the historical fire.
   :param state: The state of teh historical fire. This is the full name of the state
                 and is case-sensitive.
   :param fire: The individual fire given the year and state. This is case-sensitive.
   :param path: The path to the BurnMD dataset.
   :param height: The height of the screen size (meters).
   :param width: The width of the screen size (meters).

   .. py:method:: get_mitigations_by_time(start_time, end_time)

      Retrieve all mitigations between the start and end times


   .. py:method:: convert_to_datetime(bmd_time)

      Convert a BurnMD dataset time to a Python datetime.datetime object

      :param bmd_time: The BurmMD time string

      :returns: A Python datetime.datetime object of the input BurnMD time



.. py:function:: get_closest_indice(lat_lon_data, point)

   Utility function to help find the closest index for the geospatial point.

   :param lat_lon_data: array of the (h, w, (lat, lon)) data of the screen_size of the
                        simulation
   :param point: a tuple pair of lat/lon point. [latitude, longitude]

   :returns:

             tuple pair of index in lat/lon array that corresponds to
                 the simulation array index
   :rtype: y, x


